#!/bin/bash

source plaf.bash

expname=dsbench

seqwidth=48

algs_reclaimers_pools="dsbench_hytm2_3path~debra~none dsbench_tl2~debra~none dsbench_hytm1~debra~none dsbench_hytm2~debra~none dsbench_hytm3~debra~none dsbench_hybridnorec~debra~none"
#algs_reclaimers_pools="$algs_reclaimers_pools dsbench_tl2~none~none dsbench_hytm1~none~none dsbench_hytm2~none~none dsbench_hytm3~none~none dsbench_hybridnorec~none~none"

if [ "$machine" == "cheshire-r07u03" ]; then
    algs_reclaimers_pools="$algs_reclaimers_pools dsbench_hytm2_nonspec~debra~none dsbench_hybridnorec_nonspec~debra~none"
    #algs_reclaimers_pools="$algs_reclaimers_pools dsbench_hytm2_nonspec~none~none dsbench_hybridnorec_nonspec~none~none"
fi

keyranges="100000 10000"
insdel_pcnts="0 5 20"

ntrials=3
t=10000
timeoutsec=`expr $t / 1000`
timeoutsec=`expr $timeoutsec + 3`
p=-p
ma=new
pinnings="${pin_cluster} ${pin_scatter}"

if [ "$#" -ne "0" ]; then
	echo "RUNNING IN TEST MODE"
	ntrials=1
	t=1
	p=
fi

##########################################################
## NOTE DIRECTORY CHANGE!
##########################################################
cd ..
# we are now running in ../

outdir=output.${machine}.${expname}
libdir=../lib
bindir=.
scriptsdir=scripts
logfile=$outdir/log.out
compilinglogfile=$outdir/compiling.out
stderrfile=$outdir/stderr.out
f=$outdir/temp.out

# back up old output dir, and create a new one
rm -r -f $outdir.old 2>/dev/null
mv $outdir $outdir.old 2>/dev/null
mkdir $outdir 2>/dev/null

envcmd=""

# locate jemalloc library
if [ -e "${libdir}/libjemalloc.so" ]; then
    envcmd="LD_PRELOAD=${libdir}/libjemalloc.so"
elif [ -e "${libdir}/libjemalloc.so.2" ]; then
    envcmd="LD_PRELOAD=${libdir}/libjemalloc.so.2"
else
    echo "envcmd=$envcmd libdir=$libdir ifexists=${libdir}/libjemalloc.so.2"
    echo "ERROR: could not find jemalloc library"
    exit 1
fi

echo "-------------------- BEGIN VARIABLES --------------------" >> $logfile
( set -o posix ; set ) >> $logfile
echo "--------------------- END VARIABLES ---------------------" >> $logfile

cat $logfile

#problems=""

echo > $compilinglogfile

cnt1=0
cnt2=0
for counting in 1 0; do
for pinning in $pinnings; do
    if [ "$counting" -eq "0" ]; then
        ### COMPILE ALL ALGORITHMS (for this pinning option)
	cd scripts
        ./compile_x64.sh "$pinning" | tee -a ../$compilinglogfile || (echo ERROR COMPILING && exit 1)
        cd ..
    fi

    #makecmd="make -f Makefile.stm -j machine=$machine EXTRAFLAGS1=$xargs1 EXTRAFLAGS3=-DHTM_ATTEMPT_THRESH=20 pinning=$pinning"
    for k in $keyranges; do
    for alg_reclaimer_pool in $algs_reclaimers_pools; do
        alg=`echo $alg_reclaimer_pool | cut -d"~" -f1`
        mr=`echo $alg_reclaimer_pool | cut -d"~" -f2`
        mp=`echo $alg_reclaimer_pool | cut -d"~" -f3`
            if [ "$counting" -eq "1" ]; then
                echo "counting trials for pinning $pinning, alg $alg, mr $mr, mp $mp and k $k"
            fi

            for insdel_pcnt in $insdel_pcnts; do
            for nthreads in $threadcounts; do
                if [ "$nthreads" -gt "1" ]; then
                    nminusone=`expr $nthreads - 1`
                    workandrqcounts="${nthreads}~0 ${nminusone}~1"
                else
                    workandrqcounts="${nthreads}~0"
                fi
                for nworkandrq in $workandrqcounts; do
                    nwork=`echo $nworkandrq | cut -d"~" -f1`
                    nrq=`echo $nworkandrq | cut -d"~" -f2`

                    if [ $counting -eq 1 ]; then
                        cnt1=$(( cnt1 + ntrials ))
                        continue
                    fi
                    for ((trial=0;trial<$ntrials;++trial)); do
                        cnt2=`expr $cnt2 + 1`
                        echo -n "trial $cnt2 / $cnt1: "

                        args="-t $t -mr $mr -ma $ma -mp $mp $p -k $k -i $insdel_pcnt -d $insdel_pcnt -rq 0 -rqsize 256 -nwork $nwork -nrq $nrq"
                        cmd="$machine.$alg $args"
                        fname=`echo $cmd | tr " " "."`
                        fname="step$cnt2.${fname}.-seqwidth.$seqwidth.-trial.$trial.-pinning.${pinning}"
                        fname="$outdir/$fname.data"
                        echo "$envcmd ${malloc_conf} time timeout $timeoutsec $cmdprefix $bindir/$cmd >> $fname 2>>$stderrfile"
                        echo "$envcmd ${malloc_conf} time timeout $timeoutsec $cmdprefix $bindir/$cmd >> $fname 2>>$stderrfile" > $fname
                        eval "$envcmd ${malloc_conf} time timeout $timeoutsec $cmdprefix $bindir/$cmd >> $fname 2>>$stderrfile"
                        if [ "$?" -ne "0" ]; then
                            #problems="${problems}ERROR: nonzero status after executing cmd ``$envcmd ${malloc_conf} time timeout $timeoutsec $cmdprefix $bindir/$cmd >> $fname 2>>$stderrfile\n''"
                            echo "ERROR: nonzero status after executing preceding command"
                            #cat $stderrfile
                            #exit
                        fi
                    done
                done
            done
        done
    done
    done
done
done

cat $logfile > $f
cat $compilinglogfile > $logfile
echo >> $logfile
cat $f >> $logfile
rm -f $f
rm -f $compilinglogfile

#cd $scriptsdir
#./${expname}.format ${machine}
#cd ..

#echo -e $problems
cat $stderrfile
